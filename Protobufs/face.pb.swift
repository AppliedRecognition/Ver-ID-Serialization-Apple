// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: face.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Verid_Face {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bounds: Verid_Rect {
    get {return _bounds ?? Verid_Rect()}
    set {_bounds = newValue}
  }
  /// Returns true if `bounds` has been explicitly set.
  var hasBounds: Bool {return self._bounds != nil}
  /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
  mutating func clearBounds() {self._bounds = nil}

  var angle: Verid_EulerAngle {
    get {return _angle ?? Verid_EulerAngle()}
    set {_angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return self._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {self._angle = nil}

  var quality: Float = 0

  var leftEye: Verid_Point {
    get {return _leftEye ?? Verid_Point()}
    set {_leftEye = newValue}
  }
  /// Returns true if `leftEye` has been explicitly set.
  var hasLeftEye: Bool {return self._leftEye != nil}
  /// Clears the value of `leftEye`. Subsequent reads from it will return its default value.
  mutating func clearLeftEye() {self._leftEye = nil}

  var rightEye: Verid_Point {
    get {return _rightEye ?? Verid_Point()}
    set {_rightEye = newValue}
  }
  /// Returns true if `rightEye` has been explicitly set.
  var hasRightEye: Bool {return self._rightEye != nil}
  /// Clears the value of `rightEye`. Subsequent reads from it will return its default value.
  mutating func clearRightEye() {self._rightEye = nil}

  var landmarks: [Verid_Point] = []

  var dlibLandmarks: [Float] = []

  var serialized: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bounds: Verid_Rect? = nil
  fileprivate var _angle: Verid_EulerAngle? = nil
  fileprivate var _leftEye: Verid_Point? = nil
  fileprivate var _rightEye: Verid_Point? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Verid_Face: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "verid"

extension Verid_Face: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Face"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "angle"),
    3: .same(proto: "quality"),
    4: .standard(proto: "left_eye"),
    5: .standard(proto: "right_eye"),
    6: .same(proto: "landmarks"),
    7: .standard(proto: "dlib_landmarks"),
    8: .same(proto: "serialized"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._bounds) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._angle) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.quality) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._leftEye) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rightEye) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.landmarks) }()
      case 7: try { try decoder.decodeRepeatedFloatField(value: &self.dlibLandmarks) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self.serialized) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bounds {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._angle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.quality != 0 {
      try visitor.visitSingularFloatField(value: self.quality, fieldNumber: 3)
    }
    try { if let v = self._leftEye {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rightEye {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.landmarks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.landmarks, fieldNumber: 6)
    }
    if !self.dlibLandmarks.isEmpty {
      try visitor.visitPackedFloatField(value: self.dlibLandmarks, fieldNumber: 7)
    }
    if !self.serialized.isEmpty {
      try visitor.visitSingularBytesField(value: self.serialized, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Verid_Face, rhs: Verid_Face) -> Bool {
    if lhs._bounds != rhs._bounds {return false}
    if lhs._angle != rhs._angle {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs._leftEye != rhs._leftEye {return false}
    if lhs._rightEye != rhs._rightEye {return false}
    if lhs.landmarks != rhs.landmarks {return false}
    if lhs.dlibLandmarks != rhs.dlibLandmarks {return false}
    if lhs.serialized != rhs.serialized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
